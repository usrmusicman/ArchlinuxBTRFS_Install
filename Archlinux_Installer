#!/bin/sh

## Make sure to have pacman.conf in the same directory as Archlinux_Installer before executing this script.

# Boot and OS partitions. (i.e. /dev/sda2) Use a partition manager like cfdisk to create.
BOOT_DEVICE=""
INSTALL_DEVICE=""

# Mountpoint for install. (i.e. /mnt)
MOUNT_DIR=""

# Computer and User Credentials
HOSTNAME=""
USERNAME=""
PASSWORD=""

# Keymap to use. Use the command 'localectl list-keymaps' to find your keyboard type (i.e. us)
KEYMAP=""
# System Locale/Language. Use the command 'cat /etc/locale.gen'. (i.e. en_US.UTF-8)
LOCALE=""
# Your Timezone. Use the command 'timedatectl list-timezones' to find your timezone. (i.e. America/Toronto)
TIMEZONE=""

# Name Your OS Install (Default is Archlinux)
OS_NAME="Archlinux"

#<-- OS Install List -->

## Install Base System
INSTALL_BASE="alsa-utils apparmor bash-completion bluez bluez-hid2hci bluez-plugins bluez-tools bluez-utils btrfs-progs clinfo dbus-broker efibootmgr exfatprogs ffmpeg git grub grub-btrfs gst-libav gst-plugin-libcamera gst-plugin-pipewire gst-plugins-bad gst-plugins-bad-libs gst-plugins-base gst-plugins-base-libs gst-plugins-espeak gst-plugins-good gst-plugins-ugly gst-rtsp-server hunspell hunspell-en_au hunspell-en_ca hunspell-en_gb hunspell-en_us iwd lib32-gst-plugins-base lib32-gst-plugins-base-libs lib32-gst-plugins-good lib32-ocl-icd lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-pipewire-v4l2 lib32-vulkan-mesa-layers linux-firmware linux-cachyos linux-cachyos-headers lsb-release man-db man-pages mkinitcpio mkinitcpio-firmware mtools multilib-devel net-tools networkmanager networkmanager-openvpn ocl-icd opencl-mesa openssh pkgstats pipewire pipewire-alsa pipewire-jack pipewire-pulse pipewire-v4l2 pipewire-x11-bell pipewire-zeroconf realtime-privileges sudo vim vim-runtime vulkan-mesa-layers wireless-regdb wireplumber xf86-input-evdev xf86-input-libinput zram-generator"

## Install Plasma Desktop
INSTALL_DESKTOP="appmenu-gtk-module archlinux-appstream-data ark dolphin dolphin-plugins dxvk-mingw-git ebook-tools ffmpegthumbs firefox firewalld flatpak gamemode gwenview heroic-games-launcher-bin icoutils kaccounts-integration kamera kate kcalc kdeconnect kdegraphics-thumbnailers keditbookmarks kf5 kf5-aids kio-extras kio-gdrive konsole lib32-gamemode lib32-mangohud libappimage libdbusmenu-glib libdbusmenu-gtk2 libdbusmenu-gtk3 libdbusmenu-qt5 libdbusmenu-qt6 libgpod libnfs lutris maliit-framework maliit-keyboard mangohud noto-fonts noto-fonts-cjk noto-fonts-emoji okular orca p7zip partitionmanager plasma proton-ge-custom protontricks-git qt5-imageformats packagekit-qt5 simple-scan spectacle steam steam-native-runtime ttf-liberation unarchiver unrar usbguard vlc vkd3d-proton-mingw-git wget wine-ge-custom xdg-user-dirs-gtk xpadneo-dkms youtube-dl yt-dlp"

#<-- GPU Driver Install List -->

## AMD GPU DRIVERS
AMD_DRV="lib32-vulkan-radeon vulkan-radeon xf86-video-amdgpu"

## INTEL GPU DRIVERS
INTEL_DRV="intel-compute-runtime intel-media-driver lib32-vulkan-intel onednn onevpl onevpl-cpu onevpl-intel-gpu vulkan-intel"

## NVIDIA GPU DRIVERS
NVIDIA_DRV="lib32-libva-vdpau-driver lib32-nvidia-utils lib32-opencl-nvidia libva-vdpau-driver libvdpau-va-gl nvidia-dkms nvidia-utils opencl-nvidia vdpauinfo"

##<-- Install System, DO NOT EDIT BELOW THIS POINT IF YOU DON'T KNOW WHAT YOU'RE DOING! -->

##<-- System Install Options -->

install_desktop() {
    ## Install Desktop Environment
    arch-chroot $MOUNT_DIR pacman -S --noconfirm $INSTALL_DESKTOP

    ## Enable desktop services system-wide
    arch-chroot $MOUNT_DIR systemctl enable sddm.service

    ## Add user to groups
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME flatpak
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME sddm
    echo "Installed Desktop Enviornment..." && sleep 5
}

install_os() {
    ## Detect CPU and GPU.
    DETECT_CPU=`cat /proc/cpuinfo | tr -d " " | head -10 | grep vendor_id | cut -d : -f 2`
    DETECT_GPU=`lspci | grep VGA | cut -d ":" -f 3 | cut -d " " -f 2`

    ## Installation PARTUUID
    DETECT_INSTALL=`lsblk -o PARTUUID $INSTALL_DEVICE | tr "\n" "," | cut -d "," -f 2`

    ## Initialize pacman-keyring
    pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
    pacman-key --lsign-key 3056513887B78AEB
    pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
    pacman-key --init
    pacman-key --populate archlinux chaotic

    ## Install pacman.conf
    install -Dm644 pacman.conf /etc/pacman.conf
    install -Dm644 pacman.conf $MOUNT_DIR/etc/pacman.conf

    ## Install System
    pacstrap $MOUNT_DIR archlinux-keyring base base-devel chaotic-keyring chaotic-mirrorlist
    arch-chroot $MOUNT_DIR pacman-key --init
    arch-chroot $MOUNT_DIR pacman-key --populate archlinux chaotic

    ## Install the display drivers
    if [[ "$DETECT_GPU" == "Advanced" ]]; then
        ## Install AMD GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $AMD_DRV $INSTALL_BASE
        echo "Installed AMD Drivers..." && sleep 5
    elif [[ "$DETECT_GPU" == "Intel" ]]; then
        ## Install Intel GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $INTEL_DRV $INSTALL_BASE
        echo "Installed Intel Drivers..." && sleep 5
    elif [[ "$DETECT_GPU" == "NVIDIA" ]]; then
        ## Install Nvidia GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $NVIDIA_DRV $INSTALL_BASE
        ## Enable Nvidia related services
        arch-chroot $MOUNT_DIR systemctl enable nvidia-hibernate
        arch-chroot $MOUNT_DIR systemctl enable nvidia-persistenced
        arch-chroot $MOUNT_DIR systemctl enable nvidia-powerd.service
        arch-chroot $MOUNT_DIR systemctl enable nvidia-resume
        arch-chroot $MOUNT_DIR systemctl enable nvidia-suspend
        echo "Installed Nvidia Drivers..." && sleep 5
    fi

    ## Generate filesystem mounts
    genfstab -U $MOUNT_DIR > $MOUNT_DIR/etc/fstab

    ## Install CPU firmware and create boot entry
    if [[ "$DETECT_CPU" == "AuthenticAMD" ]]; then
        ## Install AMD CPU Firmware
        arch-chroot $MOUNT_DIR pacman -S --noconfirm amd-ucode
    elif [[ "$DETECT_CPU" == "GenuineIntel" ]]; then
        ## Install Intel CPU Firmware
        arch-chroot $MOUNT_DIR pacman -S --noconfirm intel-ucode
    fi
    
    ## Install GRUB
    arch-chroot $MOUNT_DIR grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="$OS_NAME" $BOOT_DEVICE
    ## Configure GRUB
    sed -i -e "s/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"root=PARTUUID=$DETECT_INSTALL rootfstype=btrfs resume=PARTUUID=$DETECT_INSTALL rootflags=subvol=@ loglevel=3 lsm=landlock,lockdown,yama,integrity,apparmor,bpf mitigations=off nowatchdog threadirqs usbbcore.autosuspend=-1\"/" $MOUNT_DIR/etc/default/grub
    sed -i -e "s/#GRUB_DISABLE_SUBMENU=y/GRUB_DISABLE_SUBMENU=y/" $MOUNT_DIR/etc/default/grub
    ## Initialize GRUB
    arch-chroot $MOUNT_DIR grub-mkconfig -o /boot/grub/grub.cfg

    ## Install ZRAM Configure
    echo "[zram0]" > $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "host-memory-limit = none" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "zram-size = min(ram / 2, 8192)" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "compression-algorithm = zstd" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "options = discard" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "swap-priority = 32767" >> $MOUNT_DIR/etc/systemd/zram-generator.conf

    ## Create Disk Rules
    echo "HDD" > $MOUNT_DIR/etc/udev/rules.d/60-ioschedulers.rules
    echo "ACTION==\"add|change\", KERNEL==\"sd[a-z]*\", ATTR{queue/rotational}==\"1\", ATTR{queue/scheduler}=\"bfq\"" >> $MOUNT_DIR/etc/udev/rules.d/60-ioschedulers.rules
    echo "SSD" >> $MOUNT_DIR/etc/udev/rules.d/60-ioschedulers.rules
    echo "ACTION==\"add|change\", KERNEL==\"sd[a-z]*|mmcblk[0-9]*\", ATTR{queue/rotational}==\"0\", ATTR{queue/scheduler}=\"none\"" >> $MOUNT_DIR/etc/udev/rules.d/60-ioschedulers.rules
    echo "NVME SSD" >> $MOUNT_DIR/etc/udev/rules.d/60-ioschedulers.rules
    echo "ACTION==\"add|change\", KERNEL==\"nvme[0-9]*\", ATTR{queue/rotational}==\"0\", ATTR{queue/scheduler}=\"none\"" >> $MOUNT_DIR/etc/udev/rules.d/60-ioschedulers.rules

    ## Disable Core Dumps
    echo "kernel.core_pattern=/dev/null" > $MOUNT_DIR/etc/sysctl.d/50-coredump.conf

    ## Set Swappiness to 10
    echo "vm.swappiness = 10" > $MOUNT_DIR/etc/sysctl.d/90-swappiness.conf

    ## Set Maximum File Watches to 600000
    echo "fs.inotify.max_user_watches = 600000" > $MOUNT_DIR/etc/sysctl.d/90-max_user_watches.conf

    ## Set hostname
    echo "$HOSTNAME" > $MOUNT_DIR/etc/hostname

    ## Configure global environment
    echo "EDITOR=/usr/bin/vim" >> $MOUNT_DIR/etc/environment

    ## Set system language
    echo "LANG=$LOCALE" > $MOUNT_DIR/etc/locale.conf
    sed -i -e "s/#$LOCALE/$LOCALE/" $MOUNT_DIR/etc/locale.gen
    arch-chroot $MOUNT_DIR locale-gen
    arch-chroot $MOUNT_DIR localectl set-locale LANG=$LOCALE

    ## Set timezone and correct time
    arch-chroot $MOUNT_DIR ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime

    ## Create the new non-root user
    arch-chroot $MOUNT_DIR useradd -m $USERNAME

    ## Set password for the new user
    echo "$USERNAME:$PASSWORD" | arch-chroot $MOUNT_DIR chpasswd

    ## Enable the wheel group root privileges
    sed -i -e 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' $MOUNT_DIR/etc/sudoers

    ## Enable desktop services system-wide
    arch-chroot $MOUNT_DIR systemctl enable avahi-daemon.service
    arch-chroot $MOUNT_DIR systemctl enable avahi-dnsconfd.service
    arch-chroot $MOUNT_DIR systemctl enable bluetooth.service
    arch-chroot $MOUNT_DIR systemctl enable cpupower.service
    arch-chroot $MOUNT_DIR systemctl disable dbus.service
    arch-chroot $MOUNT_DIR systemctl enable dbus-broker.service
    arch-chroot $MOUNT_DIR systemctl enable fstrim.timer
    arch-chroot $MOUNT_DIR systemctl enable NetworkManager.service
    arch-chroot $MOUNT_DIR systemctl enable rtirq.service
    arch-chroot $MOUNT_DIR systemctl enable rtirq-resume.service
    arch-chroot $MOUNT_DIR systemctl enable systemd-oomd.socket

    ## Add user to groups
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME audio
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME avahi
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME gamemode
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME games
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME realtime
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME rtkit
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME video
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME wheel
    echo "Installed Base System..." && sleep 5
}

mount_filesystem() {
    ## Mount root filesystem
    mount -t btrfs $INSTALL_DEVICE $MOUNT_DIR

    ## Create BTRFS subvolumes
    btrfs subvolume create $MOUNT_DIR/@
    btrfs subvolume create $MOUNT_DIR/@home
    btrfs subvolume create $MOUNT_DIR/@log
    btrfs subvolume create $MOUNT_DIR/@opt
    btrfs subvolume create $MOUNT_DIR/@pkg

    ## Unmount root filesystem
    umount $MOUNT_DIR
    echo "Created Subvolumes..." && sleep 5

    ## Mount BTRFS root @ subvolume
    mount -t btrfs -o rw,compress=zstd,subvol=@ $INSTALL_DEVICE $MOUNT_DIR

    ## Make system directories
    mkdir -p $MOUNT_DIR/home
    mkdir -p $MOUNT_DIR/opt
    mkdir -p $MOUNT_DIR/var/cache/pacman/pkg
    mkdir -p $MOUNT_DIR/var/log

    ## Mount BTRFS subvolumes
    mount -t btrfs -o rw,compress=zstd,subvol=@home $INSTALL_DEVICE $MOUNT_DIR/home
    mount -t btrfs -o rw,compress=zstd,subvol=@log $INSTALL_DEVICE $MOUNT_DIR/var/log
    mount -t btrfs -o rw,compress=zstd,subvol=@opt $INSTALL_DEVICE $MOUNT_DIR/opt
    mount -t btrfs -o rw,compress=zstd,subvol=@pkg $INSTALL_DEVICE $MOUNT_DIR/var/cache/pacman/pkg

    ## Make efi directory
    mkdir -p $MOUNT_DIR/boot/efi

    ## Mount the efi partition
    mount $BOOT_DEVICE $MOUNT_DIR/boot/efi
    echo "Mounted Partitions..." && sleep 5
}

##<-- Partition Drives -->
partition_system() {
    ## Create A UEFI Boot Partition
    mkfs.vfat -F32 $BOOT_DEVICE

    ## Create A BTRFS root partition
    mkfs.btrfs -f $INSTALL_DEVICE

    ## Label BTRFS root partition and efi boot partition
    btrfs filesystem label $INSTALL_DEVICE $OS_NAME
    fatlabel $BOOT_DEVICE BOOT
    echo "Formatted Partitions..." && sleep 5
}

##<-- Unmount OS -->
unmount_os() {
    ## Unmount Filesystems
    umount -lf $MOUNT_DIR
    echo "$OS_NAME Install Complete..." && sleep 5
}

#<-- Main Program UNCOMMENT TO ACTIVATE --> ############
if [[ $USER == "root" ]]; then
    partition_system
    mount_filesystem
    install_os
    install_desktop
    unmount_os
fi
